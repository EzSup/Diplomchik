@page "/blogAdd"
@using TinyMCE.Blazor
@using Restaurant.Client.Shared.Admin
@using Restaurant.Client.Contracts.Blogs
@using Restaurant.Client.Services.Interfaces
@using Mapster
@inject IPhotoService photoService
@inject IBlogsService blogsService
@inject ISnackbar snackbar
@layout AdminLayout

<div style="justify-content: center; display: flex; margin-top: 50px; ">
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudText Style="font-weight: bolder"><MudIcon Icon="@Icons.Material.Outlined.CreateNewFolder" />  Post blog form</MudText>
                    <Editor Conf="editorConf" ApiKey="8zphuyb6qu417r6obeo20vs5guns8lzh7lbie76w1k8g7z19" @bind-Value="blogEditingObj.Content" />
                    <EditForm Model="@blogEditingObj" OnValidSubmit="OnValidSubmit" style="width: 550px;">
                        <DataAnnotationsValidator />                        
                        <MudTextField Label="Author name" HelperText="Enter an author name" @bind-Value="blogEditingObj.AuthorName" />
                        <MudTextField Label="Title" HelperText="Enter a title of the blog" @bind-Value="blogEditingObj.Title" />
                        <InputFile accept="@AllowedExtenstions" OnChange="HandleFileChange" class="form-control" />
                        <ValidationSummary />
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" Style="margin-left:auto; margin-right:auto;">Confirm</MudButton>
                    </EditForm>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

</div>

@code {
    BlogsCreateRequest blogEditingObj = new();
    IBrowserFile uploadedPhoto = null!;
    string AllowedExtenstions = ".png,.jpg,.jpeg,.gif";
    private Dictionary<string, object> editorConf = new Dictionary<string, object>{
       {"plugins", "advlist anchor autosave image link linkchecker lists media searchreplace table template visualblocks wordcount"},
     };


    private void HandleFileChange(InputFileChangeEventArgs e)
    {
        uploadedPhoto = e.File;
    }

    private async void OnValidSubmit(EditContext context)
    {
        try
        {
            if (await blogsService.PostBlogAsync(uploadedPhoto, blogEditingObj))
                NavManager.NavigateTo("/blogsManage");
        }
        catch (Exception ex)
        {
            snackbar.Add(ex.Message, Severity.Error);
        }
    }
}
