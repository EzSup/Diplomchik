@page "/cart/{userId:guid}"
@using Restaurant.Client.Contracts.Carts
@using Restaurant.Client.Contracts.Customers
@inject ICartsService cartService
@inject ICustomersService customersService

@if (cart != null)
{
    @foreach (var dish in cart.Dishes)
    {
        <DishRowOfCart Dish="dish" OnButtonClick="() => Update(dish.Id, dish.count)"></DishRowOfCart>
    }
}
<div class="form-group">
    <lable class="form-Label">Email Address</lable>
    <select @bind="orderType">
        <option value="@OrderType.InRestaurant">In restaurant</option>
        <option value="@OrderType.Delivery">Delivery</option>
    </select>
</div>
<button @onclick="Continue">
    Confirm and continue
</button>

@code {

    [Parameter]
    public Guid userId { get; set; }
    private OrderType orderType = OrderType.InRestaurant;

    private Guid customerId;

    CartResponse cart;

    protected override async Task OnInitializedAsync()
    {
        customerId = (await customersService.GetByUserId(userId)).Id;
        cart = await cartService.GetByCustomer(customerId);
    }
    private async Task Update(Guid dishId, int count)
    {
        cart = await cartService.AddDishToCartOfCustomerByCustomerId(customerId, dishId, count);
    }

    private void Continue()
    {
        switch (orderType)
        {
            case OrderType.InRestaurant:
                NavManager.NavigateTo("/selectTable");
                break;
            case OrderType.Delivery:
                NavManager.NavigateTo("/deliveryForm");
                break;
        }
    }

    enum OrderType
    {
        InRestaurant,
        Delivery
    }
}
