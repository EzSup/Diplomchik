@page "/menu"
@using Restaurant.Client.Services.Interfaces
@using Restaurant.Client.Contracts.Dishes
@using Restaurant.Client.Contracts.Cuisines
@using Restaurant.Client.Contracts.Categories
@inject IDishesService dishesService
@inject ICategoriesService categoriesService
@inject ICuisinesService cuisinesService
    <!-- Вікно зі стравами -->
    <div class="menu-container">
        <!-- Приклад однієї картки страви -->
        @if (dishes != null)
        {
            @foreach (var dish in dishes)
            {
                <DishCard Dish="dish" />
            }
        }
    </div>    

    <!-- Вікно з фільтрами -->
    <EditForm Model="@filter" OnSubmit="Filter" class="filters-container">
        <div class="filter">
            <InputText placeholder="Назва" @bind-Value="filter.Name"></InputText>
        </div>@*
        <div class="filter">
        <label for="category">Категорія:</label>
        <select id="category">
        <option value="all">Усі</option>
        <option value="main">Основні страви</option>
        <option value="dessert">Десерти</option>
        <!-- Додайте інші категорії за необхідності -->
        </select>
        </div> *@
        <div class="filter">
            <label for="minPrice">Ціна від:</label>
            <InputNumber id="minPrice" @bind-Value="@filter.MinPrice"></InputNumber>
        </div>
        <div class="filter">
            <label for="maxPrice">Ціна до:</label>
            <InputNumber id="maxPrice" @bind-Value="@filter.MaxPrice"></InputNumber>
        </div>
        <div class="filter">
            <label for="minWeight">Вага від:</label>
            <InputNumber id="minWeight" @bind-Value="@filter.MinWeight"></InputNumber>
        </div>
        <div class="filter">
            <label for="maxWeight">Вага до:</label>
            <InputNumber id="maxWeight" @bind-Value="@filter.MaxWeight"></InputNumber>
        </div>
        <div class="filter">
            <label for="cuisine">Кухня:</label>
            <InputRadioGroup id="cuisine" @bind-Value="@filter.Cuisine">
                <br />
                <InputRadio Value="@string.Empty" id="allcuisine" ></InputRadio>
                <label for="allcuisine">Усі</label><br />
                @foreach(var cuisine in cuisines)
                {
                    <InputRadio Value="@cuisine.Name" id="@(cuisine.Name + "cuisine")">

                    </InputRadio>

                    <label for="@(cuisine.Name +"cuisine")">@cuisine.Name</label>

                    <br />
                }
            </InputRadioGroup>
        </div>
        <div class="filter">
            <label for="category">Категорія:</label>
            <InputRadioGroup id="category" @bind-Value="@filter.Category">
                <br />
                <InputRadio Value="@string.Empty" id="allcategory"></InputRadio>
                <label for="allcategory">Усі</label><br />
                @foreach (var category in categories)
                {
                    <InputRadio Value="@category.Name" id="@(category.Name + "category")">
                    </InputRadio>
                    <label for="@(category.Name +"category")">@category.Name</label> <br />
                }
            </InputRadioGroup>
        </div>
        <!-- Додайте інші фільтри за необхідності -->
        <button class="apply-btn">Застосувати фільтри</button>
    </EditForm>
    <div class="pagination-buttons">
        @if (currentPageIndex > 1)
        {
            <button @onclick="() => GoToPage(currentPageIndex - 1)">Previous</button>
        }

        @if (currentPageIndex < totalPages)
        {
            <button @onclick="() => GoToPage(currentPageIndex + 1)">Next</button>
        }
    </div>
@code {
    DishPaginationRequest filter;
    ICollection<DishPaginationResponse> dishes;
    IEnumerable<CategoryResponse> categories = [];
    IEnumerable<CuisineResponse> cuisines = [];
    int currentPageIndex = 1;
    const int pageSize = 12;
    int totalPages = 1;


    protected async override Task OnInitializedAsync()
    {
        filter = new() { pageIndex = currentPageIndex, pageSize = pageSize };
        await Filter();
        categories = (await categoriesService.GetAll()).ToArray();
        cuisines = (await cuisinesService.GetAll()).ToArray();
    }

    private async Task GoToPage(int page)
    {
        currentPageIndex = page;
        await Filter();
    }

    private async Task Filter()
    {       
        
        totalPages = await dishesService.GetPagesCount(filter);
        dishes = await dishesService.GetByFilter(filter);
    }
}