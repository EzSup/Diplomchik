@page "/menu"
@using Restaurant.Client.Services.Interfaces
@using Restaurant.Client.Contracts.Dishes
@using Restaurant.Client.Contracts.Cuisines
@using Restaurant.Client.Contracts.Categories
@using Restaurant.Client.Contracts.Enums
@inject IDishesService dishesService
@inject ICategoriesService categoriesService
@inject ICuisinesService cuisinesService
@inject ICartsService cartsService
@inject AuthenticationStateProvider provider

<Title Min>Menu</Title>

<!-- Вікно з фільтрами -->
<EditForm Model="@filter" OnSubmit="Filter" class="filters-container">
    <div class="filters-container">
        <div class="filter">
            <InputText placeholder="Назва" @bind-Value="filter.Name"></InputText>
        </div>@*
        <div class="filter">
        <label for="category">Категорія:</label>
        <select id="category">
        <option value="all">Усі</option>
        <option value="main">Основні страви</option>
        <option value="dessert">Десерти</option>
        <!-- Додайте інші категорії за необхідності -->
        </select>
        </div> *@
        <div class="filter">
            <label for="minPrice">Ціна від:</label>
            <InputNumber id="minPrice" @bind-Value="@filter.MinPrice"></InputNumber>
            <div class="on-checked"></div>
        </div>
        <div class="filter">
            <label for="maxPrice">Ціна до:</label>
            <InputNumber id="maxPrice" @bind-Value="@filter.MaxPrice"></InputNumber>
            <div class="on-checked"></div>
        </div>
        <div class="filter">
            <label for="minWeight">Вага від:</label>
            <InputNumber id="minWeight" @bind-Value="@filter.MinWeight"></InputNumber>
            <div class="on-checked"></div>
        </div>
        <div class="filter">
            <label for="maxWeight">Вага до:</label>
            <InputNumber id="maxWeight" @bind-Value="@filter.MaxWeight"></InputNumber>
            <div class="on-checked"></div>
        </div>
        <div class="filter radio">
            <label for="cuisine">Кухня:</label>
            <InputRadioGroup id="cuisine" @bind-Value="@filter.Cuisine">
                <label for="allcuisine">
                    <InputRadio Value="@string.Empty" id="allcuisine" class="hidden"></InputRadio>
                    Усі
                    <div class="on-checked"></div>
                </label>
                @foreach (var cuisine in cuisines)
                {
                    <label for="@(cuisine.Name +"cuisine")">
                        <InputRadio Value="@cuisine.Name" id="@(cuisine.Name + "cuisine")" class="hidden"></InputRadio>
                        @cuisine.Name
                        <div class="on-checked"></div>
                    </label>

                }
            </InputRadioGroup>
        </div>
        <div class="filter radio">
            <label for="category">Категорія:</label>
            <InputRadioGroup id="category" @bind-Value="@filter.Category">
                <label for="allcategory">
                    <InputRadio Value="@string.Empty" id="allcategory" class="hidden"></InputRadio>
                    Усі
                    <div class="on-checked"></div>
                </label>
                @foreach (var category in categories)
                {
                    <label for="@(category.Name +"category")">
                        <InputRadio Value="@category.Name" id="@(category.Name + "category")" class="hidden"></InputRadio>
                        @category.Name
                        <div class="on-checked"></div>
                    </label>
                }
            </InputRadioGroup>
        </div>
        <div class="filter radio">
            <label for="order">Sorting order:</label>
            <InputRadioGroup id="order" @bind-Value="@filter.order">
                @foreach (var orderType in (DishSortingOrder[])Enum.GetValues(typeof(DishSortingOrder)))
                {
                    <label for="@(orderType.ToString() +"order")">
                        <InputRadio Value="@orderType" id="@(orderType.ToString() + "order")" class="hidden"></InputRadio>
                        @orderType.ToString()
                        <div class="on-checked"></div>
                    </label>
                }
            </InputRadioGroup>
        </div>
        <!-- Додайте інші фільтри за необхідності -->
        <button type="submit" style="width: 100%; height: 60px;">Застосувати фільтри</button>
    </div>
</EditForm>

<!-- Вікно зі стравами -->
<div class="menu-container">
    <!-- Приклад однієї картки страви -->
    @if (dishes != null)
    {
        @foreach (var dish in dishes)
        {
            <DishCard Dish="dish" OnClick="() => AddDishAndGoToCart(dish.Id)" />
        }
    }
</div>


<div class="pagination-buttons">
    @if (currentPageIndex > 1)
    {
        <button @onclick="() => GoToPage(currentPageIndex - 1)">Previous</button>
    }

    @if (currentPageIndex < totalPages)
    {
        <button @onclick="() => GoToPage(currentPageIndex + 1)">Next</button>
    }
</div>
@code {
    DishPaginationRequest filter;
    ICollection<DishPaginationResponse> dishes;
    IEnumerable<CategoryResponse> categories = [];
    IEnumerable<CuisineResponse> cuisines = [];
    Guid currentUserId = Guid.Empty;
    int currentPageIndex = 1;
    const int pageSize = 12;
    int totalPages = 1;


    protected async override Task OnInitializedAsync()
    {
        filter = new() { pageIndex = currentPageIndex, pageSize = pageSize };
        await Filter();
        categories = (await categoriesService.GetAll()).ToArray();
        cuisines = (await cuisinesService.GetAll()).ToArray();
        var state = await provider.GetAuthenticationStateAsync();
        if (Guid.TryParse(state.User.Identity.Name, out Guid userId) && userId != Guid.Empty)
        {
            currentUserId = userId;
        }

    }

    private async Task GoToPage(int page)
    {
        currentPageIndex = page;
        filter.pageIndex = currentPageIndex;
        await Filter();
    }

    private async Task Filter()
    {

        totalPages = await dishesService.GetPagesCount(filter);
        dishes = await dishesService.GetByFilter(filter);
    }

    private async Task AddDishAndGoToCart(Guid dishId)
    {
        await cartsService.AddDishToCartOfCustomerByUserId(currentUserId, dishId, 1);
        NavManager.NavigateTo($"/cart/{currentUserId}");
    }
}