@page "/menu"
@using Restaurant.Client.Services.Interfaces
@using Restaurant.Client.Contracts.Dishes
@using Restaurant.Client.Contracts.Cuisines
@using Restaurant.Client.Contracts.Categories
@using Restaurant.Client.Contracts.Enums
@inject IDishesService dishesService
@inject ICategoriesService categoriesService
@inject ICuisinesService cuisinesService
@inject ICartsService cartsService
@inject AuthenticationStateProvider provider

<Title Min>Menu</Title>

<EditForm Model="@filter" OnSubmit="Filter" class="filters-container">
    <div class="filters-container">
        <div class="filter">
            <InputText placeholder="Назва" @bind-Value="filter.Name"></InputText>
            <div class="on-checked"></div>
        </div>
        <div class="filter">
            <label for="minPrice">Ціна від:</label>
            <InputNumber id="minPrice" @bind-Value="@filter.MinPrice"></InputNumber>
            <div class="on-checked"></div>
        </div>
        <div class="filter">
            <label for="maxPrice">Ціна до:</label>
            <InputNumber id="maxPrice" @bind-Value="@filter.MaxPrice"></InputNumber>
            <div class="on-checked"></div>
        </div>
        <div class="filter">
            <label for="minWeight">Вага від:</label>
            <InputNumber id="minWeight" @bind-Value="@filter.MinWeight"></InputNumber>
            <div class="on-checked"></div>
        </div>
        <div class="filter">
            <label for="maxWeight">Вага до:</label>
            <InputNumber id="maxWeight" @bind-Value="@filter.MaxWeight"></InputNumber>
            <div class="on-checked"></div>
        </div>
        <div class="radio-filters">
        <div class="filter radio">
            <label for="cuisine">Кухня:</label>
            <InputRadioGroup id="cuisine" @bind-Value="@filter.Cuisine">
                <label for="allcuisine">
                    <InputRadio Value="@string.Empty" id="allcuisine" class="hidden"></InputRadio>
                    Усі
                    <div class="on-checked"></div>
                </label>
                @foreach (var cuisine in cuisines)
                {
                    <label for="@(cuisine.Name +"cuisine")">
                        <InputRadio Value="@cuisine.Name" id="@(cuisine.Name + "cuisine")" class="hidden"></InputRadio>
                        @cuisine.Name
                        <div class="on-checked"></div>
                    </label>

                }
            </InputRadioGroup>
        </div>
        <div class="filter radio">
            <label for="category">Категорія:</label>
            <InputRadioGroup id="category" @bind-Value="@filter.Category">
                <label for="allcategory">
                    <InputRadio Value="@string.Empty" id="allcategory" class="hidden"></InputRadio>
                    Усі
                    <div class="on-checked"></div>
                </label>
                @foreach (var category in categories)
                {
                    <label for="@(category.Name +"category")">
                        <InputRadio Value="@category.Name" id="@(category.Name + "category")" class="hidden"></InputRadio>
                        @category.Name
                        <div class="on-checked"></div>
                    </label>
                }
            </InputRadioGroup>
        </div>
        <div class="filter radio">
            <label for="order">Sorting order:</label>
            <InputRadioGroup id="order" @bind-Value="@filter.order">
                @foreach (var orderType in (DishSortingOrder[])Enum.GetValues(typeof(DishSortingOrder)))
                {
                    <label for="@(orderType.ToString() +"order")">
                        <InputRadio Value="@orderType" id="@(orderType.ToString() + "order")" class="hidden"></InputRadio>
                        @orderType.ToString()
                        <div class="on-checked"></div>
                    </label>
                }
            </InputRadioGroup>
        </div>
        </div>      
    </div>
    <button type="submit" class="apply-btn Opacity0" @onclick="checkdishescount">Застосувати фільтри</button>
</EditForm>

<div class="menu-container">
    @if (dishes != null)
    {
        @foreach (var dish in dishes)
        {
            <DishCard Dish="dish" OnClick="() => GoToDishPage(dish.Id)" OnClickCart="() => AddDishAndGoToCart(dish.Id)" />
        }
    }
</div>

<div class="pagination-buttons">
    @if (currentPageIndex > 1)
    {
        <button @onclick="() => GoToPage(currentPageIndex - 1)">Previous</button>
    }

    @if (currentPageIndex < totalPages)
    {
        <button @onclick="() => GoToPage(currentPageIndex + 1)">Next</button>
    }
</div>
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const menuContainer = document.querySelector('.menu-container');
        const dishes = menuContainer.querySelectorAll('.dish');

        if (dishes.length < 6) {
            menuContainer.classList.add('less-than-six');
            menuContainer.classList.remove('more-than-six');
        } else {
            menuContainer.classList.add('more-than-six');
            menuContainer.classList.remove('less-than-six');
        }
    });
</script>
@code {
    DishPaginationRequest filter;
    ICollection<DishPaginationResponse> dishes;
    IEnumerable<CategoryResponse> categories = [];
    IEnumerable<CuisineResponse> cuisines = [];
    Guid currentUserId = Guid.Empty;
    int currentPageIndex = 1;
    const int pageSize = 12;
    int totalPages = 1;


    protected async override Task OnInitializedAsync()
    {
        filter = new() { pageIndex = currentPageIndex, pageSize = pageSize };
        await Filter();
        categories = (await categoriesService.GetAll()).ToArray();
        cuisines = (await cuisinesService.GetAll()).ToArray();
        var state = await provider.GetAuthenticationStateAsync();
        if (Guid.TryParse(state.User.Identity.Name, out Guid userId) && userId != Guid.Empty)
        {
            currentUserId = userId;
        }
    }

    private async Task GoToPage(int page)
    {
        currentPageIndex = page;
        filter.pageIndex = currentPageIndex;
        await Filter();
    }

    private void GoToDishPage(Guid dishId)
    {
        NavManager.NavigateTo($"/dishPage/{dishId}");
    }

    private async Task Filter()
    {

        totalPages = await dishesService.GetPagesCount(filter);
        dishes = await dishesService.GetByFilter(filter);
    }

    private async Task AddDishAndGoToCart(Guid dishId)
    {
        await cartsService.AddDishToCartOfCustomerByUserId(currentUserId, dishId, 1);
        NavManager.NavigateTo($"/cart/{currentUserId}");
    }
    private async Task checkdishescount()
    {
        try
        {
            await JS.InvokeVoidAsync("checkDishesCount");
        }catch{}
    }
    protected override async void OnAfterRender(bool firstRender)
    {
        try
        {
            await JS.InvokeAsync<object>("AnimateMenuButtons");
            
        }catch{}
        if (firstRender)
        {
            try
            {
                Thread.Sleep(1000);
                await JS.InvokeVoidAsync("AddClassInView", "ScaledPlus", "NormalScale", 0.7);
                await JS.InvokeVoidAsync("AddClassInView", "filters-container", "animated", 0.5);
                await JS.InvokeVoidAsync("AddClassInView", "menu-container", "animated", 1);
                Thread.Sleep(1000);
                await JS.InvokeVoidAsync("AddClassInView", "Opacity0", "Opacity1", 0.5);
            }
            catch { }
        }
    }
}