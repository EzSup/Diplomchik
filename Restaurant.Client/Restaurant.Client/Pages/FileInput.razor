@* @page "/files"
@layout EmptyLayout
@using Restaurant.Core.Services.Interfaces;
@using Restaurant.Client.Services.Interfaces;
@inject IFileUploadService fileService
<h3>FileInput</h3>

<EditForm Model="@imageModel" OnValidSubmit="@HandleFormSubmit">
    Select File(s):<InputFile OnChange="@SelectFiles" multiple />
    <br />
    <button type="submit">Upload</button>
</EditForm>

@if (loading)
{
    <span>Uploading...</span>
}

<ul style="list-style:none">
    @foreach (var message in messages)
    {
        <li>
            @message
        </li>
    }
</ul>

@if(images.Count>0)
{
    <h2>Images</h2>
     <div style="display:flex;gap:20px;flex-wrap:wrap;">
        @foreach (var image in images)
        {
            <img src="/Uploads/@image.ImageName" alt="image">
        }
    </div>
}

@code {
    [Parameter]
    public string[] Value { get; set; }
    [Parameter]
    public EventCallback<string[]> ValueChanged { get; set; }
    [Parameter]
    public int MaxFilesCount { get; set; } = 3;
    [Parameter]
    public int MaxFileSize { get; set; } = 1 * 1024 * 1024;
    [Parameter]
    public string[] AllowedExtensions { get; set; } = new string[] { ".png", ".jpg", ".jpeg", ".gif" };
    bool loading = false;
    List<string> messages = new();
    List<IBrowserFile> files = new();

    ImageFile imageModel = new();
    List<ImageFile> images = new();

    public record ImageFile
    {
        public int Id { get; set; }
        public string ImageName { get; set; }
    }

    private void SelectFiles(InputFileChangeEventArgs e)
    {
        files = e.GetMultipleFiles(MaxFileSize).ToList();
    }

    private async Task HandleFormSubmit()
    {
        loading = true;
        messages.Clear();
        List<string> filenames = new();
        int count = 0;
        if(files.Count > MaxFilesCount)
        {
            messages.Add("Files count is exceeded");
            loading = false;
            return;
        }
        foreach (var file in files)
        {
            try
            {
                (int statusCode, string statusMessage) = await fileService.UploadFileAsync(file, MaxFileSize, AllowedExtensions);
                if (statusCode == 1)
                {
                    messages.Add($"File : {file.Name} uploaded");
                    filenames.Add(statusMessage);
                    count++;
                }
                else
                    messages.Add(statusMessage);
            }
            catch (Exception ex)
            {
                messages.Add(ex.Message);
            }
        }
        await ValueChanged.InvokeAsync(filenames.ToArray());

        loading = false;
        messages.Add($"{count}/{files.Count} uploaded");
    }
}
 *@