@page "/login"
@layout EmptyLayout
@inject IAccountService accountService
@inject IJSRuntime js
<div class="container">
    <div class="row">
        <div class="col-sm-4">
            <h2>Login</h2>
            <EditForm Model="@Login" OnValidSubmit="LoginClicked">
                <DataAnnotationsValidator />  
                <div class="form-group">
                    <lable class="form-Label">Email Address</lable>
                    <InputText @bind-Value="Login.Email" class="form-control"></InputText>
                </div>
                <div class="form-group mt-3">
                    <lable class="form-Label">Password</lable>
                    <InputText @bind-Value="Login.Password" class="form-control"></InputText>
                </div>
                <div class="form-group mt-3">
                    <button class="btn btn-primary" type="submit">Login</button>
                </div>
                <ValidationSummary />
            </EditForm>
        </div>
    </div>
</div>

@code {
    LoginDto Login = new();

    async Task LoginClicked()
    {
        LoginResponse response = await accountService.LoginAsync(Login);
        if (!response.Flag)
        {
            await js.InvokeVoidAsync("alert", response.Message);
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        customAuthStateProvider.UpdateAuthenticationState(response.JWTToken);
        NavManager.NavigateTo("/", forceLoad: true);
    }
}
