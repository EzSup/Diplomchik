@page "/register"
@layout EmptyLayout
@inject AuthenticationStateProvider AuthStateProvider
<div class="container">
    <div class="row">
        <div class="col-sm-4">
            <h2>Register</h2>
            <EditForm Model="@Register" OnValidSubmit="RegisterClicked">
                <DataAnnotationsValidator />   
                <div class="form-group">
                    <lable class="form-Label">Name</lable>
                    <InputText @bind-Value="Register.Name" class="form-control"></InputText>
                </div>
                <div class="form-group">
                    <lable class="form-Label">Email Address</lable>
                    <InputText @bind-Value="Register.Email" class="form-control"></InputText>
                </div>
                <div class="form-group">
                    <lable class="form-Label">Phone number</lable>
                    <InputText @bind-Value="Register.PhoneNum" class="form-control"></InputText>
                </div>
                <div class="form-group mt-3">
                    <lable class="form-Label">Password</lable>
                    <InputText @bind-Value="Register.Password" class="form-control"></InputText>
                </div>
                <div class="form-group mt-3">
                    <lable class="form-Label">Confirm password</lable>
                    <InputText @bind-Value="Register.ConfirmPassword" class="form-control"></InputText>
                </div>
                <div class="form-group mt-3">
                    <button class="btn btn-primary" type="submit">Register</button>
                </div>
                <div class="form-group mt-3">
                    <a href="/login">Go to login page</a>
                </div>
                <div class="form-group mt-3">
                    <a href="/">Go to main page</a>
                </div>
                <ValidationSummary />
            </EditForm>
        </div>
    </div>
</div>

@code {
    RegisterDto Register = new();

    async Task RegisterClicked()
    {
        await accountService.RegisterAsync(Register);
    }
}
