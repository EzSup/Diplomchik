@page "/register"
@layout EmptyLayout
@inject IAccountService accountService
@inject IJSRuntime js
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthStateProvider
<div class="container">
    <div class="row">
        <div class="col-sm-4">
            <h2>Register</h2>
            <EditForm Model="@Register" OnValidSubmit="RegisterClicked">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <lable class="form-Label">Name</lable>
                    <InputText @bind-Value="Register.Name" class="form-control"></InputText>
                </div>
                <div class="form-group">
                    <lable class="form-Label">Phonen number</lable>
                    <InputText @bind-Value="Register.PhoneNum" class="form-control"></InputText>
                </div>
                <div class="form-group">
                    <lable class="form-Label">Email Address</lable>
                    <InputText @bind-Value="Register.Email" class="form-control"></InputText>
                </div>
                <div class="form-group mt-3">
                    <lable class="form-Label">Password</lable>
                    <InputText @bind-Value="Register.Password" class="form-control"></InputText>
                </div>
                <div class="form-group mt-3">
                    <lable class="form-Label">Confirm password</lable>
                    <InputText @bind-Value="Register.ConfirmPassword" class="form-control"></InputText>
                </div>
                <div class="form-group mt-3">
                    <button class="btn btn-primary" type="submit">Register</button>
                </div>
                <ValidationSummary />
            </EditForm>
        </div>
    </div>
</div>

@code {
    RegisterDto Register = new();

    async Task RegisterClicked()
    {
        RegistrationResponse response = await accountService.RegisterAsync(Register);
        if (!response.Flag)
        {
            await js.InvokeVoidAsync("alert", response.Message);
            return;
        }
        await js.InvokeVoidAsync("alert", response.Message);
        Register = new();
        return;
    }
}
