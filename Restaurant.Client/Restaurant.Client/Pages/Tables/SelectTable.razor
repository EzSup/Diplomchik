@using Restaurant.Client.Pages.Tables
@using Restaurant.Client.Contracts.Tables
@inject ITablesService tablesService
@page "/selectTable"
<Title>Choose the table</Title>
<div class="Container">
    <select @onchange="TimePicked">
        @for (int i = 8; i <= 20; i++)
        {

            DateTime dateValue = new DateTime(date.Year, date.Month, date.Day, i, 1, 1);
            <option value="@dateValue">
                @dateValue.ToString("hh"):00
            </option>
        }
    </select>
    <div class="Content-wrap">
        @if (tables != null && tables.Length >= 8)
        {
            <InputRadioGroup @bind-Value="table">
                <div class="wrap-col" style="width: 40%">
                    <div class="wrap-col-content content-flex-start">
                        <TwoSeatsTable Value="@tables[0].Id" Disabled="@(!tables[0].Free)" />
                    </div>
                    <div class="wrap-col-content flex-row mid">
                        <SixSeatsTable Value="@tables[4].Id" Disabled="@(!tables[4].Free)" />
                        <SixSeatsTable Value="@tables[5].Id" Disabled="@(!tables[5].Free)" />
                    </div>
                </div>
                <div class="wrap-col" style="width: 60%">
                    <div class="wrap-col-content flex-row justify-center">
                        <EightSeatsTable Value="@tables[6].Id" Disabled="@(!tables[6].Free)" />
                        <EightSeatsTable Value="@tables[7].Id" Disabled="@(!tables[7].Free)" />
                    </div>
                    <div class="wrap-col-content flex-row mid">
                        <FourSeatsTable Value="@tables[2].Id" Disabled="@(!tables[2].Free)" />
                        <FourSeatsTable Value="@tables[3].Id" Disabled="@(!tables[3].Free)" />
                    </div>
                    <div class="wrap-col-content flex-row justify-end content-flex-end">
                        <TwoSeatsTableHorizontal Value="@tables[1].Id" />
                    </div>
                </div>
            </InputRadioGroup>
        }
    </div>
    <AuthorizeView>
        <Authorized>
            @if (table != Guid.Empty)
            {
                <button @onclick="ReserveTable">Reserve</button>
            }
        </Authorized>
    </AuthorizeView>
</div>
@code {
    DateTime date;
    Guid table = Guid.Empty;
    TableResponse[] tables;

    protected override async Task OnInitializedAsync()
    {
        DateTime dateNow = DateTime.Now;
        date = new DateTime(dateNow.Year, dateNow.Month, dateNow.Day, dateNow.Hour + 1, 1, 1);
        tables = (await tablesService.GetTablesOfTime(date)).ToArray();
    }

    private async Task TimePicked(ChangeEventArgs e)
    {
        string selectedTime = e.Value.ToString();
        date = DateTime.Parse(selectedTime);
        tables = (await tablesService.GetTablesOfTime(date)).ToArray();
    }

    private async Task ReserveTable()
    {
        var request = new ReserveRequest()
            {
                tableId = table,
                start = date
            };
        var result = await tablesService.Reserve(request);
        if (result != Guid.Empty)
        {
            NavManager.NavigateTo("/");
        }
    }

    private async Task TableClicked()
    {

    }
}
