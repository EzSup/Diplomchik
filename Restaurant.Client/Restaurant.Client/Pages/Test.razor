@page "/test"
@using TinyMCE.Blazor
@using Restaurant.Client.Contracts.Blogs
@using Restaurant.Client.Services.Interfaces
@inject IBlogsService blogsService
@attribute [Authorize(Policy = "AdminPolicy")]
<style>    
    .forms {
        width: 80%;
        max-width: 700px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        margin: 0 auto;
    }
</style>
<div class="Main-Content">
<div class="forms">
    <h3>Articles</h3>
<EditForm Model="request" OnValidSubmit="post">
    <DataAnnotationsValidator />
    <div class="form-group">
        <lable class="form-Label">Author Name</lable>
        <InputText @bind-Value="request.AuthorName" class="form-control"></InputText>
    </div>
    <div class="form-group">
        <lable class="form-Label">Title</lable>
        <InputText @bind-Value="request.Title" class="form-control"></InputText>
    </div>

    
   
    <button type="submit">Підтвердити</button>
    <ValidationSummary/>
</EditForm>
<div class="form-group">
    <lable class="form-Label">Title</lable>
    <Editor Conf="editorConf" ApiKey="8zphuyb6qu417r6obeo20vs5guns8lzh7lbie76w1k8g7z19" @bind-Value="request.Content" />
</div>
<p>@createdId</p>

@* <p  style="color: white;"> @value </p>
@((MarkupString)value)   *@
</div>
</div>
@code {
    BlogsCreateRequest request = new();
    string createdId = "";

    private async Task post()
    {
        var id = await blogsService.PostBlogAsync(request);
        createdId = id.ToString();
    }

    private Dictionary<string, object> editorConf = new Dictionary<string, object>{
       {"plugins", "advlist anchor autosave image link linkchecker lists media searchreplace table template visualblocks wordcount"},
     };

}